# this local Makefile includes the cluster targets

OPTHOST	   	 := $(shell uname -n | sed 's/\(.zib.de\)//g' | sed 's/\(portal\|test\)//g' | tr -cd '[:alpha:]')

-include $(SCIPDIR)/make/local/make.$(OPTHOST)

# -------------------------------------------------------------------------------------------------
# scripts for testing on local machine
# -------------------------------------------------------------------------------------------------

.PHONY: testfscip
testfscip: check/check_fscip.sh check/configuration_set.sh check/configuration_logfiles.sh check/evalcheck_cluster.sh
		cd check; \
		$(SHELL) ./check_fscip.sh $(TEST) $(FSCIP) $(SETTINGS) $(notdir $(FSCIP)).$(OSTYPE).$(ARCH) $(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) \
		$(CONTINUE) $(LOCK) $(VERSION) $(LPS) $(DEBUGTOOL) $(CLIENTTMPDIR) $(REOPT) $(OPTCOMMAND) $(SETCUTOFF) $(MAXJOBS) $(VISUALIZE) $(PERMUTE) \
		$(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(EMPHBENCHMARK);

.PHONY: testcplex
testcplex:
		cd check; \
		$(SHELL) ./check.sh $(TEST) $(CPLEX) $(SETTINGS) $(notdir $(CPLEX)).$(OSTYPE).$(ARCH) $(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) \
		$(CONTINUE) $(LOCK) $(VERSION) $(LPS) $(DEBUGTOOL) $(CLIENTTMPDIR) $(REOPT) $(OPTCOMMAND) $(SETCUTOFF) $(MAXJOBS) $(VISUALIZE) $(PERMUTE) \
                $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testxpress
testxpress:
		cd check; \
		$(SHELL) ./check.sh $(TEST) $(XPRESS_BIN) $(SETTINGS) $(notdir $(XPRESS_BIN)).$(OSTYPE).$(ARCH) $(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) \
		$(CONTINUE) $(LOCK) $(VERSION) $(LPS) $(DEBUGTOOL) $(CLIENTTMPDIR) $(REOPT) $(OPTCOMMAND) $(SETCUTOFF) $(MAXJOBS) $(VISUALIZE) $(PERMUTE) \
                $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testmosek
testmosek:
		cd check; \
		$(SHELL) ./check_mosek.sh $(TEST) $(MOSEK) $(SETTINGS) $(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) $(CONTINUE);

.PHONY: testcbc
testcbc:
		cd check; \
		$(SHELL) ./check.sh $(TEST) $(CBC) $(SETTINGS) $(notdir $(CBC)).$(OSTYPE).$(ARCH) $(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) \
		$(CONTINUE) $(LOCK) $(VERSION) $(LPS) $(DEBUGTOOL) $(CLIENTTMPDIR) $(REOPT) $(OPTCOMMAND) $(SETCUTOFF) $(MAXJOBS) $(VISUALIZE) $(PERMUTE) \
                $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testgurobi
testgurobi:
		cd check; \
		$(SHELL) ./check.sh $(TEST) $(GUROBI) $(SETTINGS) $(notdir $(GUROBI)).$(OSTYPE).$(ARCH) $(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) \
		$(CONTINUE) $(LOCK) $(VERSION) $(LPS) $(DEBUGTOOL) $(CLIENTTMPDIR) $(REOPT) $(OPTCOMMAND) $(SETCUTOFF) $(MAXJOBS) $(VISUALIZE) $(PERMUTE) \
                $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testglpk
testglpk:
		cd check; \
		$(SHELL) ./check_glpk.sh $(TEST) $(GLPK) $(SETTINGS) $(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(DISPFREQ) $(CONTINUE);

.PHONY: testsymphony
testsymphony:
		cd check; \
		$(SHELL) ./check_symphony.sh $(TEST) $(SYMPHONY) $(SETTINGS) $(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) \
		$(DISPFREQ) $(CONTINUE);


# -------------------------------------------------------------------------------------------------
# scripts for testing on cluster
# -------------------------------------------------------------------------------------------------

# solvers using the general scripts setting up tmpfiles:

.PHONY: testcluster
testcluster: check/check_cluster.sh check/configuration_cluster.sh check/configuration_set.sh check/configuration_logfiles.sh check/configuration_tmpfile_setup_scip.sh check/evalcheck_cluster.sh check/check.awk check/run.sh
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(EXECUTABLE) $(SETTINGS) $(BINID) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
		$(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) $(REOPT) $(OPTCOMMAND) \
                $(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) \
		$(EMPHBENCHMARK) $(CLOCKTYPE) $(WITHCERTIFICATE);

.PHONY: testclusterfscip
testclusterfscip: check/check_cluster_fscip.sh check/configuration_cluster.sh check/configuration_set.sh check/configuration_logfiles.sh check/evalcheck_cluster.sh check/check.awk
		cd check; \
		$(SHELL) ./check_cluster_fscip.sh $(TEST) $(FSCIP) $(SETTINGS) $(notdir $(FSCIP)) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
		$(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) $(REOPT) $(OPTCOMMAND) \
		$(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) $(EMPHBENCHMARK);

.PHONY: testclustercpx
testclustercpx: check/check_cluster.sh check/configuration_cluster.sh check/configuration_set.sh check/configuration_logfiles.sh check/configuration_tmpfile_setup_cplex.sh check/evalcheck_cluster.sh check/check_cplex.awk check/run.sh
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(CPLEX) $(SETTINGS) $(notdir $(CPLEX)).$(OSTYPE).$(ARCH) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
                $(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) false $(OPTCOMMAND) \
		$(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) \
		$(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testclusterxpress
testclusterxpress: check/check_cluster.sh check/configuration_cluster.sh check/configuration_set.sh check/configuration_logfiles.sh check/configuration_tmpfile_setup_xpress.sh check/evalcheck_cluster.sh check/check_xpress.awk check/run.sh
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(XPRESS_BIN) $(SETTINGS) $(notdir $(XPRESS_BIN)).$(OSTYPE).$(ARCH) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
                $(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) false $(OPTCOMMAND) \
		$(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) \
		$(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testclustercbc
testclustercbc:
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(CBC) $(SETTINGS) $(notdir $(CBC)).$(OSTYPE).$(ARCH) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
                $(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) false $(OPTCOMMAND) \
		$(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) \
		$(EMPHBENCHMARK) $(CLOCKTYPE);

.PHONY: testclustergurobi
testclustergurobi:
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(GUROBI) $(SETTINGS) $(notdir $(GUROBI)).$(OSTYPE).$(ARCH) \
		$(OUTPUTDIR) $(TIME) $(NODES) $(MEM) $(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
                $(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(SEEDS) $(GLBSEEDSHIFT) $(STARTPERM) $(DEBUGTOOL) false $(OPTCOMMAND) \
		$(SETCUTOFF) $(VISUALIZE) $(CLUSTERNODES) $(EXCLUDENODES) $(SLURMACCOUNT) $(PYTHON) \
		$(EMPHBENCHMARK) $(CLOCKTYPE);

# solvers with a specialized interface:

.PHONY: testclustermosek
testclustermosek:
		cd check; \
		$(SHELL) ./check_cluster_mosek.sh $(TEST) $(MOSEK) $(SETTINGS) \
		$(OSTYPE).$(ARCH) $(TIME) $(NODES) $(MEM) \
		$(THREADS) $(FEASTOL) $(DISPFREQ) $(CONTINUE) $(QUEUETYPE) $(QUEUE) $(PPN) \
		$(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE);

.PHONY: testgamscluster
testgamscluster:
		cd check; \
		$(SHELL) ./check_gamscluster.sh $(TEST) $(GAMS) "$(GAMSSOLVER)" $(SETTINGS) \
		$(OSTYPE).$(ARCH) $(TIME) $(NODES) $(MEM) "$(GAP)" $(THREADS) $(CONTINUE) \
		"$(CONVERTSCIP)" $(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) $(SETCUTOFF);

# for testing examples, see the scripts examples/maketestallexamples.sh and applications/maketestallapplications.sh

.PHONY: coverage
coverage:
		$(SHELL) ./check/check_coverage.sh $(MAINFILE) $(notdir $(MAINFILE)).$(HOSTNAME) $(MEM) $(VERSION) $(LPS) $(OBJDIR);

.PHONY: solchecker
solchecker:
		cd ./check/solchecker; \
		$(MAKE);
