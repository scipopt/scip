CC		=	clang
CXX		=	clang++
LINKCC		=	clang
LINKCXX		=	clang++
ARFLAGS		=	crs
ZLIB_FLAGS	=
ZLIB_LDFLAGS 	=	-lz
GMP_FLAGS	=
GMP_LDFLAGS 	=	-lgmp
MPFR_LDFLAGS	=	-lmpfr
READLINE_FLAGS	=
READLINE_LDFLAGS=	-lreadline -lncurses
FORTRANLIBS	=	-lgfortran
FORTRAN_NAMING_CONVENTION = LCASE_DECOR
CFLAGS		=	-ffp-contract=off -std=c99 -D_XOPEN_SOURCE=600
CXXFLAGS	=	-ffp-contract=off

# GCC and CLANG warning flags are not all equal; so disable warnings about unknown warnings
GCCWARN += -Wno-unknown-warning-option
GXXWARN += -Wno-unknown-warning-option

# there are macros where we override initializers on purpose
GCCWARN += -Wno-initializer-overrides
ifeq ($(SHARED),true)
FLAGS		+=	-fPIC
endif
LINK_shared		=	-shared

# Enable sanitizers (http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation).

# enable ThreadSanitizer (http://clang.llvm.org/docs/ThreadSanitizer.html)
ifeq ($(SANITIZE),thread)
  SANITIZERFLAGS = -g -fsanitize=thread
endif

# enable AddressSanitizer (http://clang.llvm.org/docs/AddressSanitizer.html)
ifeq ($(SANITIZE),address)
  SANITIZERFLAGS = -g -fsanitize=address
endif

# enable MemorySanitizer (http://clang.llvm.org/docs/MemorySanitizer.html)
ifeq ($(SANITIZE),memory)
  SANITIZERFLAGS = -g -fsanitize=memory
endif

# UndefinedBehaviorSanitizer if SANITIZE is true, thread, address, or memory
ifneq ($(filter $(SANITIZE),true thread address memory),)
  SANITIZERFLAGS += -g -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero
endif

CFLAGS += $(SANITIZERFLAGS)
CXXFLAGS += $(SANITIZERFLAGS)
LDFLAGS += $(SANITIZERFLAGS)
ifeq ($(SHARED),true)
  LIBBUILDFLAGS += $(SANITIZERFLAGS)
endif

ifeq ($(LTO),true)
  CFLAGS	+=	-flto
  CXXFLAGS	+=	-flto
  LDFLAGS	+=	-flto
ifeq ($(SHARED),true)
  LIBBUILDFLAGS +=	-flto
endif
endif
