#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#*                                                                           *
#*                  This file is part of the program and library             *
#*         SCIP --- Solving Constraint Integer Programs                      *
#*                                                                           *
#*  Copyright (c) 2002-2025 Zuse Institute Berlin (ZIB)                      *
#*                                                                           *
#*  Licensed under the Apache License, Version 2.0 (the "License");          *
#*  you may not use this file except in compliance with the License.         *
#*  You may obtain a copy of the License at                                  *
#*                                                                           *
#*      http://www.apache.org/licenses/LICENSE-2.0                           *
#*                                                                           *
#*  Unless required by applicable law or agreed to in writing, software      *
#*  distributed under the License is distributed on an "AS IS" BASIS,        *
#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
#*  See the License for the specific language governing permissions and      *
#*  limitations under the License.                                           *
#*                                                                           *
#*  You should have received a copy of the Apache-2.0 license                *
#*  along with SCIP; see the file LICENSE. If not visit scipopt.org.         *
#*                                                                           *
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#@file    Makefile
#@brief   Makefile to include in SCIP projects
#@author  Thorsten Koch
#@author  Tobias Achterberg
#@author  Marc Pfetsch
#@author  Timo Berthold
#
# This file contains the core methods to compile SCIP. When using this
# makefile for external projects, you need to define the makefile
# variables SCIPDIR prior to inclusion.
#
# The necessary SCIP libraries can be linked by adding
# $(LINKCXXSCIPALL) or $(LINKCCSCIPALL) to your local linking command,
# e.g. $(LINKCXX) ... $(LINKCXXSCIPALL) $(LDFLAGS) if you use the C++ interface.



#-----------------------------------------------------------------------------
# detect host architecture
#-----------------------------------------------------------------------------
include $(SCIPDIR)/make/make.detecthost


#-----------------------------------------------------------------------------
# get real path to SCIP
#-----------------------------------------------------------------------------
ifeq ($(OSTYPE),mingw)
SCIPREALPATH	=	$(SCIPDIR)
else
SCIPREALPATH	=	$(realpath $(SCIPDIR))
endif


#-----------------------------------------------------------------------------
# default settings
#-----------------------------------------------------------------------------

# compiling and linking parameters
VERBOSE         ?= false
OPT             ?= opt
LTO             ?= false
COMP            ?= gnu
STATICLIBEXT    ?= a
SHAREDLIBEXT    ?= so
LIBEXT          ?= $(STATICLIBEXT)
# if SHARED = true, nevertheless link to static version of external libraries (usefull for mingw)
LIBEXTFORCESTATIC ?= false
LINKER          ?= C
SHARED          ?= false
SANITIZE        ?= false

# SCIP compile time options
NOBLKMEM        ?= false
NOBUFMEM        ?= false
NOBLKBUFMEM     ?= false
CHECKSTAGE      ?= auto
EXACTSOLVE      ?= auto
THREADSAFE      ?= true
# enable debug-solution mechanism
DEBUGSOL        ?= false

# parameters for third party dependencies
AMPL            ?= true
BOOST           ?= false
CONOPT          ?= false
DEJAVUEXTERNAL  ?= false
EXPRINT         ?= cppad
FILTERSQP       ?= false
GMP             ?= true
IPOPT           ?= false
IPOPTOPT        ?= opt
LAPACK          ?= false
LPS             ?= spx
LPSCHECK        ?= false
LPSEXACT        ?= auto
LPSOPT          ?= opt
MPFR            ?= auto
NAUTYEXTERNAL   ?= false
PAPILO          ?= false
READLINE        ?= true
SYM             ?= snauty
TPI             ?= tny
WORHP           ?= false
WORHPOPT        ?= opt
ZIMPL           ?= false
ZIMPLOPT        ?= opt
ZLIB            ?= true

# check and testing parameters
TIME            ?= 3600
NODES           ?= 2100000000
MEM             ?= 6144
THREADS         ?= 1
PERMUTE         ?= 0
SEEDS           ?= 0
GLBSEEDSHIFT    ?= 0
STARTPERM       ?= 0
DISPFREQ        ?= 10000
FEASTOL         ?= default
TEST            ?= short
SETTINGS        ?= default
CONTINUE        ?= false
LOCK            ?= false
DEBUGTOOL       ?= none
CLIENTTMPDIR    ?= /tmp
REOPT           ?= false
OPTCOMMAND      ?= optimize
SETCUTOFF       ?= 0
VISUALIZE       ?= false
WITHCERTIFICATE ?= false
MAXJOBS         ?= 1
EXECUTABLE      ?= $(MAINFILE)
BINID           ?= $(notdir $(EXECUTABLE))
OUTPUTDIR       ?= results
CLUSTERNODES    ?= all
EXCLUDENODES    ?= none
SLURMACCOUNT    ?= default
PYTHON          ?= none
EMPHBENCHMARK   ?= true
CLOCKTYPE       ?= 1

# third party testing parameters
BLIS            ?= blis
CBC             ?= cbc
CBCPARALLEL     ?= cbc-parallel
CPLEX           ?= cplex
FSCIP           ?= bin/fscip
GAMS            ?= gams
GLPK            ?= glpsol
GUROBI          ?= gurobi_cl
MOSEK           ?= mosek
SYMPHONY        ?= symphony
XPRESS_BIN      ?= xpress

# code check and doxygen
DOXY            ?= doxygen
# need to overwrite builtin variable LINT=lint
LINT             = flexelint
PCLINT          ?= pclint
PCLINTCONFIG    ?= pclp_config.py
SPLINT          ?= splint

#-----------------------------------------------------------------------------
# SCIP version
#-----------------------------------------------------------------------------

# set SCIP version here for external projects
SCIP_VERSION_MAJOR = 10
SCIP_VERSION_MINOR = 0
SCIP_VERSION_PATCH = 0
SCIP_VERSION_API = 155
SCIP_VERSION = $(SCIP_VERSION_MAJOR).$(SCIP_VERSION_MINOR).$(SCIP_VERSION_PATCH)

#-----------------------------------------------------------------------------
# load different default for debugtool
#-----------------------------------------------------------------------------
-include $(SCIPDIR)/make/local/make.debugtool

ifeq ($(DEBUGTOOL),auto)
   ifeq ($(OPT),dbg)
      override DEBUGTOOL   =   gdb
   else
      override DEBUGTOOL   =   none
   endif
endif

# compiler and linker parameters
CC		=	gcc
CC_c		=	-c # the trailing space is important
CC_o		=	-o # the trailing space is important
CXX		=	g++
CXX_c		=	-c # the trailing space is important
CXX_o		=	-o # the trailing space is important
LINKCC		=	gcc
LINKCC_L	=	-L
LINKCC_l	=	-l
LINKCC_f	=	-f
LINKCC_o	=	-o # the trailing space is important
LINKCXX		=	g++
LINKCXX_L	=	-L
LINKCXX_l	=	-l
LINKCXX_o	=	-o # the trailing space is important
LINKLIBSUFFIX	=
LINKRPATH	=	-Wl,-rpath,
DCC		=	gcc
DCXX		=	g++
AR		=	ar
AR_o		=
RANLIB		=	ranlib
LIBBUILD	=	$(AR)
LIBBUILD_o	=	$(AR_o)
LIBBUILDFLAGS	=       $(ARFLAGS)

# system parameters
SHELL		= 	bash
READ		=	read -e
LN_s		= 	ln -s
LN_sf		=	ln -sf

# initial compiler and linker flags
FLAGS		=	-I$(SRCDIR) -I$(SCIPDIR)/src
OFLAGS		=
CFLAGS		=
CXXFLAGS	=
CXX11FLAG	=	-std=c++0x
CXX14FLAG	=	-std=c++14
CXX17FLAG	=	-std=c++17

ifeq ($(COMP),msvc)
LDFLAGS		=
else
LDFLAGS		=	$(LINKCC_l)m$(LINKLIBSUFFIX)
endif

ARFLAGS		=	cr
DFLAGS		=	-MMD

# if changing GCC/GXXWARN here, also update ADD_*_FLAGS in ../CMakeLists.txt

# enable many more warnings for GCC and CLANG on C/C++
GCCWARN = -pedantic -Wall -W
GXXWARN = -pedantic -Wall -W

# enable more warnings that are not in -Wall -W (probably in -Wextra, but we don't seem to use that)
GCCWARN += -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow -Wredundant-decls -Wdisabled-optimization \
           -Wsign-compare -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes
GXXWARN += -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow -Wredundant-decls -Wdisabled-optimization \
           -Wnon-virtual-dtor -Wreorder -Woverloaded-virtual -Wsign-promo -Wsynth -Wcast-qual

# disable some warning that would be too much effort to fix, disfigure the code, or produce too many false positive
GCCWARN += -Wno-long-long -Wno-unknown-pragmas -Wno-unused-parameter -Wno-override-init -Wno-uninitialized -Wno-maybe-uninitialized
GXXWARN += -Wno-long-long -Wno-unknown-pragmas -Wno-unused-parameter -Wno-strict-overflow

#SPLINTFLAGS	=	-UNDEBUG -USCIP_WITH_READLINE -USCIP_ROUNDING_FE -USCIP_WITH_GMP -USCIP_WITH_ZLIB -preproc -formatcode +skip-sys-headers -weak +relaxtypes
SPLINTFLAGS	=	-UNDEBUG -USCIP_WITH_READLINE -USCIP_ROUNDING_FE -USCIP_WITH_GMP -USCIP_WITH_MPFR -USCIP_WITH_BOOST -USCIP_WITH_ZLIB -which-lib -warn-posix-headers +skip-sys-headers -preproc -formatcode -weak \
			-redef +export-header +export-local +decl-undef +relaxtypes

ifeq ($(SHARED),true)
LIBTYPE		=	shared
  ifeq ($(LIBEXTFORCESTATIC),true)
	LIBEXTTYPE	=	static
	LIBEXTEXT	=	$(STATICLIBEXT)
  else
	LIBEXTTYPE	=	shared
	LIBEXTEXT	=	$(SHAREDLIBEXT)
  endif
else
LIBTYPE		=	static
LIBEXTTYPE	=	static
LIBEXTEXT	=	$(STATICLIBEXT)
endif

BASE		=	$(OSTYPE).$(ARCH).$(COMP).$(OPT)
OBJDIR		=	obj/$(LIBTYPE)/O.$(BASE)
BINOBJDIR	=	$(OBJDIR)/bin
LIBOBJDIR	=	$(OBJDIR)/lib
LIBOBJSUBDIRS	=	$(LIBOBJDIR)/scip \
			$(LIBOBJDIR)/objscip \
			$(LIBOBJDIR)/blockmemshell \
			$(LIBOBJDIR)/tclique \
			$(LIBOBJDIR)/lpi \
			$(LIBOBJDIR)/lpiexact \
			$(LIBOBJDIR)/amplmp/src \
			$(LIBOBJDIR)/amplmp \
			$(LIBOBJDIR)/tpi \
			$(LIBOBJDIR)/xml \
			$(LIBOBJDIR)/dijkstra \
			$(LIBOBJDIR)/symmetry \
			$(LIBOBJDIR)/tinycthread
SRCDIR		=	src
BINDIR		=	bin
LIBDIR		=	lib
INCLUDEDIR	=	include
EXEEXTENSION	=
ALLSRC		=

# find scip/config.h in build dir
FLAGS += -I$(SCIPDIR)/$(OBJDIR)/include

#-----------------------------------------------------------------------------
# include additional make files
#-----------------------------------------------------------------------------
-include $(SCIPREALPATH)/make/make.$(BASE)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP).$(OPT)
-include $(SCIPREALPATH)/make/local/make.local

#-----------------------------------------------------------------------------
# define C++ standard
#-----------------------------------------------------------------------------

ifeq ($(PAPILO),true)
CXXFLAGS += $(CXX14FLAG)
else
CXXFLAGS += $(CXX11FLAG)
endif

#-----------------------------------------------------------------------------
# define path to find SCIP upon execution
#-----------------------------------------------------------------------------

ifeq ($(SHARED),true)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),true)
# If this makefile is used to build an external project, we use SCIPREALPATH.
LDFLAGS		+=	$(LINKRPATH)$(SCIPREALPATH)/$(LIBDIR)/shared
else
# If this makefile is used to build SCIP, we use the variable ORIGIN,
# which is replaced by the path of the binary at execution time.
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/shared
endif
endif
endif

#-----------------------------------------------------------------------------
# add user flags
#-----------------------------------------------------------------------------
FLAGS		+=	$(USRFLAGS)
OFLAGS		+=	$(USROFLAGS)
CFLAGS		+=	$(USRCFLAGS)
CXXFLAGS	+=	$(USRCXXFLAGS)
LDFLAGS		+=	$(USRLDFLAGS)
ARFLAGS		+=	$(USRARFLAGS)

#-----------------------------------------------------------------------------
# LP Solver Interface
#-----------------------------------------------------------------------------

#-------------------------------------------------------
# define flags for CPLEX
ifeq ($(LPS),cpx)
LPSLDFLAGS	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libcplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for Gurobi
ifeq ($(LPS),grb)
LPSLDFLAGS	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)gurobi.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/shared/libgurobi.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/shared
else
LDFLAGS		+=	$(LINKRPATH)$(SCIPREALPATH)/$(LIBDIR)/shared
endif
endif
endif

#-------------------------------------------------------
# define flags for XPRESS
ifeq ($(LPS),xprs)
LPSLDFLAGS	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)xprs.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
ifneq ($(LINKRPATH),)
LPSLDFLAGS	+=	$(LINKRPATH)$(dir $(realpath $(SCIPREALPATH)/$(LIBDIR)/shared/libxprs.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)))
endif
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/shared/libxprs.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for Mosek
ifeq ($(LPS),msk)
LPSLDFLAGS	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared $(LINKCC_l)mosek.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/shared/libmosek.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)

ifneq ("$(wildcard $(SCIPREALPATH)/$(LIBDIR)/shared/libcilkrts.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT))", "")
LPSLDFLAGS	+=	$(LINKCC_l)cilkrts.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
LPSLIBFILES	+=	$(SCIPREALPATH)/$(LIBDIR)/shared/libcilkrts.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)
endif

ifneq ("$(wildcard $(SCIPREALPATH)/$(LIBDIR)/shared/libiomp5.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT))", "")
LPSLDFLAGS	+=	$(LINKCC_l)iomp5.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	+=	$(SCIPREALPATH)/$(LIBDIR)/shared/libiomp5.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)
endif

ifneq ($(LINKRPATH),)
MOSEKDIR	= 	$(dir $(realpath $(SCIPREALPATH)/$(LIBDIR)/shared/libmosek.$(OSTYPE).$(ARCH).$(COMP).$(SHAREDLIBEXT)))
LPSLDFLAGS	+=      $(LINKRPATH)$(MOSEKDIR)
endif
# correct path for everything that comes after Mosek
ifneq ($(SHARED),true)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/static
endif
endif

#-------------------------------------------------------
# define flags for SoPlex
ifeq ($(LPS),spx)
LPSLDFLAGS	=	$(LINKCXX_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)

# if using the LP-check, also add Cplex flags
ifeq ($(LPSCHECK),true)
LPSLDFLAGS	+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libcplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif
endif

#-------------------------------------------------------
# define flags for Clp
ifeq ($(LPS),clp)
CLPDIR		= 	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/clp.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)
# for newer Clp versions all linker flags are in share/coin/doc/Clp/clp_addlibs.txt
LPSLDFLAGS	=	$(shell test -e $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt && cat $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt)
# if we could not find clp_addlibs file, try to guess linker flags
ifeq ($(LPSLDFLAGS),)
LPSLDFLAGS	+=	$(LINKCXX_L)$(CLPDIR)/lib $(LINKCXX_l)Clp$(LINKLIBSUFFIX) \
			$(LINKCXX_l)CoinUtils$(LINKLIBSUFFIX) \
			$(LINKCXX_l)bz2$(LINKLIBSUFFIX) $(LINKCXX_l)lapack$(LINKLIBSUFFIX)
endif
# ensure that also shared libraries are found while running the binary
ifneq ($(LINKRPATH),)
CLPFULLPATH	:=	$(realpath $(CLPDIR))
LPSLDFLAGS	+=	$(LINKRPATH)$(CLPFULLPATH)/lib
endif
LPSLIBFILES	=	$(CLPDIR)/lib/libClp.$(LIBEXTEXT) $(CLPDIR)/lib/libCoinUtils.$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for QSOPT
ifeq ($(LPS),qso)
LPSLDFLAGS    	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/static $(LINKCC_l)qsopt.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libqsopt.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
# define flags for Glop
ifeq ($(LPS),glop)
LINKER		=	CPP
FLAGS		+=	-I$(LIBDIR)/shared/ortools -I$(LIBDIR)/shared/ortools/ortools/gen -I$(LIBDIR)/shared/ortools/dependencies/install/include -I$(LIBDIR)/shared/ortools/include
LPSLDFLAGS	=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared/ortools/lib $(LINKCC_l)ortools \
			$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/shared/ortools/dependencies/install/lib $(LINKCC_l)glog
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/shared/ortools/lib/libortools.$(SHAREDLIBEXT) \
			$(SCIPREALPATH)/$(LIBDIR)/shared/ortools/dependencies/install/lib/libglog.$(SHAREDLIBEXT)
ifneq ($(LINKRPATH),)
ORTOOLSDIR	= 	$(dir $(realpath $(SCIPREALPATH)/$(LIBDIR)/shared/ortools/lib/libortools.$(SHAREDLIBEXT)))
LPSLDFLAGS	+=      $(LINKRPATH)$(ORTOOLSDIR)
GLOGDIR		= 	$(dir $(realpath $(SCIPREALPATH)/$(LIBDIR)/shared/ortools/dependencies/install/lib/libglog.$(SHAREDLIBEXT)))
LPSLDFLAGS	+=      $(LINKRPATH)$(GLOGDIR)
endif
endif

#-------------------------------------------------------
# define empty flags for "none"
ifeq ($(LPS),none)
LPSLDFLAGS	=
endif

#-------------------------------------------------------
LPILIBSHORTNAME	=	lpi$(LPS)
LPILIBNAME	=	$(LPILIBSHORTNAME)-$(VERSION)
LPILIB		=	$(LPILIBSHORTNAME).$(BASE)
LPILIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPILIB).$(LIBEXT)
LPILIBSHORTLINK	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPILIBSHORTNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# exact LP Solver Interface
#-----------------------------------------------------------------------------

ifeq ($(LPSEXACT),auto)
LPSEXACT =  none
ifeq ($(BOOST),true)
ifeq ($(LPS),spx)
LPSEXACT		=	spx
endif
endif
endif

#-------------------------------------------------------
# add flags for exact SoPlex
ifeq ($(LPSEXACT),spx)
LPSLDFLAGS	=	$(LINKCXX_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)
LPSLIBFILES	=	$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LIBEXTEXT)
endif

#-------------------------------------------------------
LPIEXLIBSHORTNAME	=	lpiexact$(LPSEXACT)
LPIEXLIBNAME	=	$(LPIEXLIBSHORTNAME)-$(VERSION)
LPIEXLIB		=	$(LPIEXLIBSHORTNAME).$(BASE)
LPIEXLIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPIEXLIB).$(LIBEXT)
LPIEXLIBSHORTLINK	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(LPIEXLIBSHORTNAME).$(LIBEXT)

#-----------------------------------------------------------------------------
# Parallel Interface
#-----------------------------------------------------------------------------

ifneq ($(TPI),none)
ifeq ($(THREADSAFE),false)
$(error Using TPI=$(TPI) requires THREADSAFE=true.)
endif
endif

TPILIBNAME	=	tpi$(TPI)

ifeq ($(TPI),omp)
ifeq ($(COMP),gnu)
TPICFLAGS	=	$(LINKCC_f)openmp$(LINKLIBSUFFIX)
TPILDFLAGS  	= 	$(LINKCC_f)openmp$(LINKLIBSUFFIX)
else ifeq ($(COMP),intel)
TPICFLAGS	=	-openmp$(LINKLIBSUFFIX)
TPILDFLAGS  	=	-openmp$(LINKLIBSUFFIX)
endif
else ifeq ($(TPI),tny)
TPICFLAGS	=
ifneq ($(COMP),msvc)
TPILDFLAGS  	=	-lpthread
endif
endif

TPILIB		=	$(TPILIBNAME).$(BASE)
TPILIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(TPILIB).$(LIBEXT)
TPILIBSHORTLINK	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(TPILIBNAME).$(LIBEXT)

#-----------------------------------------------------------------------------
# Symmetry Interface
#-----------------------------------------------------------------------------

ifeq ($(SHARED),false)
ifeq ($(SYM),bliss)
LDFLAGS		+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)bliss.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
endif

ifeq ($(SYM),sbliss)
LDFLAGS		+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)bliss.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
endif

ifeq ($(SYM)-$(NAUTYEXTERNAL),nauty-true)
LDFLAGS		+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)nauty.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
endif

ifeq ($(SYM)-$(NAUTYEXTERNAL),snauty-true)
LDFLAGS		+=	$(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE) $(LINKCC_l)nauty.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
endif
endif

ifeq ($(SYM),dejavu)
CXXFLAGS	+=	$(CXX14FLAG)
endif

#-----------------------------------------------------------------------------
# External Libraries
#-----------------------------------------------------------------------------

ifeq ($(ZLIB_LDFLAGS),)
ZLIB		=	false
endif

ifeq ($(ZLIB),true)
FLAGS		+=	$(ZLIB_FLAGS)
LDFLAGS		+=	$(ZLIB_LDFLAGS)
endif

ifeq ($(ZIMPL),auto)
ZIMPL		=	$(GMP)
ifeq ($(ZIMPL)-$(MAKELEVEL),false-0)
$(warning ZIMPL was deactived because of missing GMP support.)
endif
endif

ifeq ($(GMP_LDFLAGS),)
GMP		=	false
endif

ifeq ($(ZIMPL),true)
ifeq ($(GMP),false)
$(error ZIMPL requires the GMP to be linked. Use either ZIMPL=false or GMP=true)
endif
ZIMPLLIB	=	$(LINKCC_l)zimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT)$(LINKLIBSUFFIX)
LDFLAGS		+=	$(ZIMPLLIB) $(ZIMPL_LDFLAGS)
LPSLIBFILES	+=      $(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/libzimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT).$(LIBEXTEXT)
endif

ifeq ($(GMP),true)
FLAGS		+=	$(GMP_FLAGS)
LDFLAGS		+=	$(GMP_LDFLAGS)
endif

ifeq ($(MPFR),auto)
MPFR     =  $(BOOST)
ifeq ($(MPFR)-$(MAKELEVEL),false-0)
endif
endif

ifeq ($(MPFR),true)
ifeq ($(MPFR_LDFLAGS),)
$(error MPFR_LDFLAGS is empty. Do not know how to link MPFR, but MPFR=true)
endif
FLAGS          +=      $(MPFR_FLAGS)
LDFLAGS        +=      $(MPFR_LDFLAGS)
endif

# enable EXACTSOLVE if GMP and BOOST and MPRF are enabled and an exact LP-solver is available
ifeq ($(EXACTSOLVE),auto)
 EXACTSOLVE = false
 ifeq ($(GMP)-$(MPFR)-$(BOOST),true-true-true)
  ifneq ($(LPSEXACT),none)
   EXACTSOLVE = true
  endif
 endif
 ifeq ($(EXACTSOLVE)-$(MAKELEVEL),false-0)
  ifeq ($(GMP),false)
   EXACTMISSING   += GMP
  endif
  ifeq ($(MPFR),false)
   ifneq ($(EXACTMISSING),)
    EXACTMISSING   += and
   endif
   EXACTMISSING   += MPFR
  endif
  ifeq ($(BOOST),false)
   ifneq ($(EXACTMISSING),)
    EXACTMISSING   += and
   endif
   EXACTMISSING   += Boost
  endif
  ifeq ($(LPSEXACT),none)
   ifneq ($(EXACTMISSING),)
    EXACTMISSING   += and
   endif
   EXACTMISSING   += an exact LP-solver
  endif
 endif
endif

ifeq ($(READLINE_LDFLAGS),)
READLINE	=	false
endif

ifeq ($(READLINE),true)
FLAGS		+=	$(READLINE_FLAGS)
LDFLAGS		+=	$(READLINE_LDFLAGS)
endif

# if IPOPT is there, we do not need lapack
ifeq ($(IPOPT),true)
LAPACK		=	false
endif

ifeq ($(LAPACK),true)
LDFLAGS		+= 	$(LINKCXX_l)lapack$(LINKLIBSUFFIX)
endif

#-------------------------------------------------------
# define flags for Ipopt
ifeq ($(IPOPT),true)
LINKER		=	CPP
# we require here Ipopt >= 3.10.0
# check whether we can find Ipopt via pkg-config
IPOPTPC := $(shell PKG_CONFIG_PATH=$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib/pkgconfig:$PKG_CONFIG_PATH pkg-config --exists ipopt && echo true)
ifeq ($(IPOPTPC),true)
  # use pkg-config to figure out compiler and linker flags
  FLAGS += $(shell PKG_CONFIG_PATH=$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib/pkgconfig:$PKG_CONFIG_PATH pkg-config --cflags ipopt)
  IPOPTLIBS := $(shell PKG_CONFIG_PATH=$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib/pkgconfig:$PKG_CONFIG_PATH pkg-config --libs ipopt)
else
  # fallback:
  # - assume header files in include/coin or include/coin-or
  # - all linker flags are in share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt, if this file exists, otherwise use -lipopt (another fallback)
  FLAGS += -I$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/include/coin-or -I$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/include/coin $(IPOPT_FLAGS)
  ifneq ($(wildcard $(SCIPDIR)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt),)
    IPOPTLIBS := $(shell cat $(SCIPDIR)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt)
  else
    IPOPTLIBS := $(LINKCC_L)$(SCIPDIR)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib $(LINKCC_l)ipopt
  endif
endif
LDFLAGS		+=	$(IPOPTLIBS)
# - shared libraries are installed into Ipopt's lib directory, so add this to the rpath
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib
else
LDFLAGS		+=	$(LINKRPATH)\$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib
endif
endif
endif

# define flags for CONOPT
ifeq ($(CONOPT),true)
FLAGS += -I$(SCIPDIR)/$(LIBDIR)/shared/conoptdir/include $(CONOPT_FLAGS)
ifeq ($(OSTYPE),mingw)
CONOPTLIBS := $(LINKCC_L)$(SCIPDIR)/$(LIBDIR)/shared/conoptdir/lib conopt4.lib
else
CONOPTLIBS := $(LINKCC_L)$(SCIPDIR)/$(LIBDIR)/shared/conoptdir/lib $(LINKCC_l)conopt
endif
LDFLAGS		+=	$(CONOPTLIBS)
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/shared/conoptdir/lib
else
LDFLAGS		+=	$(LINKRPATH)\$(SCIPREALPATH)/$(LIBDIR)/shared/conoptdir/lib
endif
endif
endif

# define flags for FilterSQP
ifeq ($(FILTERSQP),true)
FILTERSQPLIBS       =       $(LINKCC_l)filtersqp.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)bqpd.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX)
LDFLAGS		+=	$(FILTERSQPLIBS) $(FORTRANLIBS)
ifeq ($(THREADSAFE),true)
  LDFLAGS += $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif
endif

# define flags for WORHP
ifeq ($(WORHP),true)
FLAGS		+=	-I$(SCIPDIR)/$(LIBDIR)/$(LIBTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/include
LDFLAGS  += $(LINKCC_l)worhp
LDFLAGS  += $(LINKCC_L)$(SCIPREALPATH)/$(LIBDIR)/$(LIBTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
ifneq ($(LINKRPATH),)
ifneq ($(SCIPINTERNAL),)
LDFLAGS		+=	$(LINKRPATH)\$$ORIGIN/../$(LIBDIR)/$(LIBEXTTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
else
LDFLAGS		+=	$(LINKRPATH)\$(SCIPREALPATH)/$(LIBDIR)/$(LIBEXTTYPE)/worhp.$(OSTYPE).$(ARCH).$(COMP).$(WORHPOPT)/lib
endif
endif
endif

ifeq ($(EXPRINT),cppad)
LINKER		=	CPP
endif

ifeq ($(CHECKSTAGE),auto)
 ifeq ($(OPT),dbg)
  CHECKSTAGE = true
 else
  CHECKSTAGE = false
 endif
endif

#-----------------------------------------------------------------------------
# SHARED Libaries
#-----------------------------------------------------------------------------

# (re)define some variables
ifeq ($(SHARED),true)
LIBEXT		=	$(SHAREDLIBEXT)
ifeq ($(LINKER),CPP)
LIBBUILD	=	$(LINKCXX)
LIBBUILD_L	=	$(LINKCXX_L)
LIBBUILD_o	=	$(LINKCXX_o)
else
LIBBUILD	=	$(LINKCC)
LIBBUILD_L	=	$(LINKCC_L)
LIBBUILD_o	=	$(LINKCC_o)
endif
LIBBUILDFLAGS	+=	$(LINK_shared)
ARFLAGS		=
RANLIB		=
endif



#-----------------------------------------------------------------------------
# SCIP Library
#-----------------------------------------------------------------------------

SCIPLIBBASENAME	=	scipbase
SCIPLIBBASE	=	$(SCIPLIBBASENAME).$(BASE)
SCIPLIBBASEFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(SCIPLIBBASE).$(LIBEXT)
SCIPLIBBASESHORTLINK =	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(SCIPLIBBASENAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# OBJSCIP Library
#-----------------------------------------------------------------------------

OBJSCIPLIBNAME	=	objscip
OBJSCIPLIB	=	$(OBJSCIPLIBNAME).$(BASE)
OBJSCIPLIBFILE	=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(OBJSCIPLIB).$(LIBEXT)
OBJSCIPLIBSHORTLINK=	$(SCIPREALPATH)/lib/$(LIBTYPE)/lib$(OBJSCIPLIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# total linking part for all of SCIP
#-----------------------------------------------------------------------------

# link SCIP for C projects
LINKCXXSCIPALL	=	$(LINKCXX_L)$(SCIPREALPATH)/lib/$(LIBTYPE) $(LINKCXX_l)$(SCIPLIBBASE)$(LINKLIBSUFFIX) \
			$(LINKCXX_l)$(OBJSCIPLIB)$(LINKLIBSUFFIX) \
			$(LINKCXX_l)$(LPILIB)$(LINKLIBSUFFIX) $(LINKCXX_l)$(LPIEXLIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(TPILIB)$(LINKLIBSUFFIX) $(LPSLDFLAGS) $(TPILDFLAGS) $(LDFLAGS)

# link SCIP for C++ projects (including libobjscip)
LINKCCSCIPALL	=	$(LINKCC_L)$(SCIPREALPATH)/lib/$(LIBTYPE) $(LINKCC_l)$(SCIPLIBBASE)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(OBJSCIPLIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(LPILIB)$(LINKLIBSUFFIX) $(LINKCC_l)$(LPIEXLIB)$(LINKLIBSUFFIX) \
			$(LINKCC_l)$(TPILIB)$(LINKLIBSUFFIX) $(LPSLDFLAGS) $(TPILDFLAGS) $(LDFLAGS)
